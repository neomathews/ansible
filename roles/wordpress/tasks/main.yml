---
- name: Install packages
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ mariadb_packages }}"
    - "{{ apache_packages }}"

- name: Setup custom log location
  file: 
    path: "/var/log/mysqld.log"
    mode: "0644"
    owner: "mysql"
    group: "mysql"
    state: "touch"

- name: Ensure service starts initially
  systemd:
    name: "{{ mariadb_service }}"
    state: started
    enabled: true

- name: Update root password for localhost
  mysql_user:
    name: root
    host: "localhost"
    password: "{{ mysql_root_password }}"
    state: present
    check_implicit_admin: "yes"
    login_user: "root"
    login_host: "localhost"
    login_password: "{{ mysql_root_password }}"
  when: ansible_hostname != 'localhost'

- name: Update root passwords for all hosts
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
    state: present
    login_user: "root"
    login_host: "localhost"
    login_password: "{{ mysql_root_password }}"
  with_items:
    - "::1"
    - "127.0.0.1"
    - "{{ ansible_fqdn }}"
    - "{{ ansible_hostname }}"
  when: ansible_hostname != 'localhost'

- name: Remove anonymous users
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
  with_items:
    - "localhost"
    - "{{ ansible_fqdn }}"
    - "{{ ansible_hostname }}"

- name: remove empty root password
  mysql_user:
    name: "root"
    host: ""
    state: absent
    login_user: "root"
    login_password: "{{ mysql_root_password }}"

- name: Remove the test database
  mysql_db:
    name: test
    state: absent
    login_user: "root"
    login_password: "{{ mysql_root_password }}"

- name: Stop service
  systemd:
    name: "{{ mariadb_service }}"
    state: "stopped"

- name: List ib_logfile remnats
  shell: ls -l /var/lib/mysql/ib_logfile?
  register: logfiles
  change_when: false

- name: Remove ib_logfiles
  file:
    path: "{{ item }}"
    state: absent
    force: yes
  with_items:
    - "{{ logfiles.stdout_lines }}"

- name: Start service
  systemd:
    name: "{{ mariadb_service }}"
    state: started
    enabled: true

- name: Create MYSQL Databases for wordpress
  mysql_db:
    name: "{{ item }}"
    state: present
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
  with_items:
    - "{{ db_wordpress_name }}"

- name: Create wordpress User
  mysql_user:
    name: "{{ db_wordpress_username }}"
    password: "{{ db_wordpress_password }}"
    priv: "{{ item.db }}.*:{{ item.privs }}"
    append_privs: yes
    state: present
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
  with_items:
    - db: "{{ db_wordpress_name }}"
      privs: 'ALL'

- name: Enable Apache in the firewall
  firewalld:
    service: http
    permanent: true
    immediate: true
    state: enabled

- name: Get Wordpress
  get_url:
    url: http://wordpress.org/latest.tar.gz
    dest: "/tmp/wordpress-{{ wordpress_version }}.tar.gz"
    validate_certs: false

- name: wordpress | Extract archive
  unarchive:
    src: "/tmp/wordpress-{{ wordpress_version }}.tar.gz"
    dest: "/tmp/"
    copy: no

- name: Wordpress | Move extracted directory to {{ wordpress_install_dir }}
  shell: "cp -a /tmp/wordpress/* {{ wordpress_install_dir }}"

- name: Create uploads directory
  file:
    path: "{{ wordpress_install_dir }}/wp-content/uploads"
    state: directory

- name: Remove sampla config file
  file:
    path: "{{ wordpress_install_dir }}/wp-config-sample.php"
    state: absent

- name: Fix ownership
  shell: "chown -R apache:apache {{ wordpress_install_dir }}"

- name: Fetch random salts for Wordpress config
  command: curl http://api.wordpress.org/secret-key/1.1/salt
  register: wp_salt

- name: copy wp-config.php
  template: 
    src: wp-config.php.j2
    dest: "{{ wordpress_install_dir }}/wp-config.php"

- name: Restore files context
  shell: "restorecon -R {{ wordpress_install_dir }}"

- name: Start and Enable httpd service
  systemd:
    name: httpd
    state: started
    enabled: true
...
